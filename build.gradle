import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group 'net.simplyvanilla'
version '0.8.4'

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven {
        url 'https://repo.papermc.io/repository/maven-public/'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'io.github.miniplaceholders:miniplaceholders-api:2.2.3'

    implementation 'com.github.chris2018998:beecp:4.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.20:3.78.0'
    testImplementation 'org.awaitility:awaitility:4.2.1'
    testRuntimeOnly 'mysql:mysql-connector-java:8.0.33'
}

test {
    useJUnitPlatform()
}

tasks {
    shadowJar {
        archiveClassifier.set('')
        relocate('org.stone.beecp', 'net.simplyvanilla.dependencies.beecp')
        relocate('org.stone.tools', 'net.simplyvanilla.dependencies.tools')
    }
    build {
        dependsOn shadowJar
    }
}

jacoco {
    toolVersion = '0.8.11' // specify the desired version
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

processResources {
    duplicatesStrategy = 'include'

    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
